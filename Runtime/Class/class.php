<?php  class error { protected $ERR_NO=0; public static function set($NO,$msg,$t=5) { switch($NO) { case 404: self::redirect('index.php?M=Redirect&A=notfound','页面未找到',5); break; case 403: self::redirect('index.php?M=Redirect&A=forbid','页面不存在或不允许访问',5); break; case 501: $msg='数据库命令执行失败:<br />'.$msg; die($msg); break; case 502: foreach($msg as $k=>$v) $str.=$k.'=>'.$v.'<br />'; $msg='数据库连接失败<br />'.$str; die($msg); break; default: die($msg); break; } } private static function redirect($baseURL,$msg,$t=5) { header('Location:/'.$baseURL.CONF('tpl_template_suffix').'?t='.$t.'&msg='.$msg); } }  class Rewrite { public static function normal() { define('MODULE',isset($_GET['M'])?ucfirst($_GET['M']):'Index'); define('ACTION',isset($_GET['A'])?strtolower($_GET['A']):'index'); } } class Mysql { protected $_linkID=array(); protected $connected=false; protected $rs; protected $record; protected $linkID; protected $queryStr; protected $queryID; protected $lastInsID; protected $numRows; private $config=array(); public function __construct($config='') { if(!empty($config)) { $this->config=$config; } } public function connect($config=array(),$linkNum=0) { if(isset($this->_linkID[$linkNum])){return $this->_linkID[$linkNum];} if(empty($config)){$config=$this->config;} $port=isset($config['port'])?$config['port']:3306; if($config['type']==1) { $this->_linkID[$linkNum]=mysql_pconnect($config['host'].':'.$port,$config['uname'],$config['psd']); } else { $this->_linkID[$linkNum]=mysql_connect($config['host'].':'.$port,$config['uname'],$config['psd']); } if($this->_linkID[$linkNum]) { mysql_query('set names '.$config['charset']); mysql_select_db($config['dbname']) or halt(603,'数据库:'.$config['dbname'].'选择失败或不存在'); $this->connected=true; return $this->_linkID[$linkNum]; } halt('数据库连接失败',$config); } public function initConnect() { if(!$this->connected) $this->linkID=$this->connect(); } public function query($str) { $this->initConnect(); if($this->queryID){$this->free();} $this->queryID=mysql_query($str,$this->linkID) or halt(QUERY_ERROR,'Query Failed:'.mysql_error($this->linkID)); if($this->queryID) { $this->numRows=mysql_num_rows($this->queryID); return $this->getAll(); } return false; } private function getAll() { $result=array(); if($this->numRows>0) { while($row=mysql_fetch_assoc($this->queryID)) { $result[]=$row; } } return $result; } public function free() { if($this->queryID){ mysql_free_result($this->queryID); } $this->queryID=null; } public function getFields($tableName) { $result = $this->query('SHOW COLUMNS FROM '.$this->parseKey($tableName)); $info=array(); if(!$result){return $info;} foreach($result as $v) { $info[]=$v['Field']; } return $info; } private function parseKey($key) { $key = trim($key); if(!preg_match('/[,\'\"\*\(\)`.\s]/',$key)) { $key = '`'.$key.'`'; } return $key; } public function execute($str) { $this->initConnect(); if($this->queryID){$this->free();} $result=mysql_query($str,$this->linkID) or halt(QUERY_ERROR,'Query Failed:'.mysql_error($this->linkID)); $this->numRows=mysql_affected_rows($this->linkID); $this->lastInsID=mysql_insert_id($this->linkID); return $this->numRows; } public function close() { if($this->linkID){mysql_close($this->linkID);} $this->linkID=null; } public function __get($key) { return isset($this->$key)?$this->$key:''; } }  class view { protected $tVar=array(); protected $cacheFileName=''; protected $action=''; protected $module=''; protected $_noheader=''; protected $_nofooter=''; protected $options=array( 'TPL_L_DELIM'=>'{{', 'TPL_R_DELIM'=>'}}', 'TPL_CACHE_ON'=>true, 'TPL_CACHE_TIME'=>0 ); public function init() { $htmlName=md5(ACTION.MODULE.'lol'); $this->cacheFileName=RUNTIME_PATH.$htmlName; } private function getHeader($charset='',$contentType='') { $charset=empty($charset)?CONF('tpl_charset'):$charset; $contentType=empty($contentType)?CONF('tpl_content_type'):$contentType; $str='<!DOCTYPE HTML PUBLIC "-//W3C/DTD HTML 4.01//EN" "http://www.w3.org/ TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="'.$contentType.'" charset="'.$charset.'" />'; if(isset($this->tVar['styles']) && is_array($this->tVar['styles'])) { $str.=$this->getFile($this->tVar['styles'],'css'); } return $str; } public function assign($name,$value='') { $this->tVar[$name]=$value; } public function get($name) { return isset($this->tVar[$name])?$this->tVar[$name]:null; } public function getAllVar() { return $this->tVar; } public function display($cacheFileName=null,$tplFile='') { ($tplFile)||($tplFile=TPL_PATH.MODULE.'/'.ACTION.CONF('tpl_template_suffix')); if(is_file($tplFile)) { $this->cacheFileName=RUNTIME_PATH.($cacheFileName?$cacheFileName:md5(MODULE.ACTION.'l*o*l')); echo checkCache($this->cacheFileName)?file_get_contents($this->cacheFileName):$this->compiler($tplFile,$this->cacheFileName); } else { halt(FILE_NOTFOUND,$tplFile.'模板文件不存在'); } } protected function compiler($tplFile,$tmpName) { $header=$this->getHeader(); $content=file_get_contents($tplFile); $matches=$this->getMatchRs(file_get_contents($tplFile)); if(isset($this->tVar['scripts'])) { $this->tVar['scripts']=$this->getFile($this->tVar['scripts'],'js'); } if(isset($this->tVar['styles'])) { unset($this->tVar['styles']); } foreach($matches[0] as $k=>$v) { if(!strpos($v,':')) { $tmp=substr($matches[1][$k],1); $d=isset($this->tVar[$tmp])?$this->tVar[$tmp]:''; } else { $file=TPL_PATH.str_replace(':','/',$matches[1][$k]).'.html'; $d=$this->commonHandle($file); } $content=str_replace($v,$d,$content); } $content=$header.$content; file_put_contents($tmpName,$content); return $content; } private function getMatchRs($con) { $B=str_replace('{','\\{',$this->options['TPL_L_DELIM']); $E=str_replace('}','\\}',$this->options['TPL_R_DELIM']); preg_match_all('/'.$B.'(\S+?)'.$E.'/',$con,$matches); return $matches; } private function commonHandle($fPath) { if(!is_file($fPath)) { return ''; } $con=file_get_contents($fPath); $matches=$this->getMatchRs($con); foreach($matches[0] as $k=>$v) { $tmp=substr($matches[1][$k],1); $d=isset($this->tVar[$tmp])?$this->tVar[$tmp]:''; $con=str_replace($v,$d,$con); } return $con; } private function getFile($path,$type) { if(is_array($path)) { $str=''; foreach($path as $k=>$v) { if(is_string($v)) { $str.=$this->getSingleFile($v,$type); } else { $str.=$this->getPackFile($k,$v,$type); } } } else { $str=$this->getSingleFile($path,$type); } return $str; } private function parsePath($data,$type) { if(!is_string($data)) return ''; $type=ucfirst($type); $suffix=strtolower($type); $fpath=''; if(substr($data,0,4)=='core') { $data=substr($data,5); $fpath=THINK_PATH.'Common/'.$type; } else { $fpath=COMMON_PATH.$type; } $fpath.='/'.str_replace('.','/',$data).'.'.$suffix; return $fpath; } private function getSingleFile($data,$type) { $fpath=$this->parsePath($data,$type); $fname=basename($fpath); $tmpPath=RUNTIME_PATH.$fname; $type=strtolower($type); if(!checkCache($tmpPath)) { if(is_file($fpath)) { file_put_contents($tmpPath,file_get_contents($fpath)); } } $path='./Runtime/'.$fname; return $this->getJoin($type,$path); } private function getJoin($type,$path) { if($type=='css') { return '<link href="'.$path.'" rel="stylesheet" />'; } elseif($type=='js') { return '<script src="'.$path.'"></script>'; } } private function getPackFile($fname,$data,$type) { $str=''; $type=strtolower($type); if(empty($fname)) { return ''; } $fname=$fname.'.'.$type; $tmpPath=RUNTIME_PATH.$fname; $tmpName='./Runtime/'.$fname; if(checkCache($tmpPath)) { return $this->getJoin($type,$tmpName); } foreach($data as $k=>$v) { $fpath=$this->parsePath($v,$type); $str.=is_file($fpath)?file_get_contents($fpath):''; } file_put_contents($tmpPath,$str); return $this->getJoin($type,$tmpName); } } class Action { private static $view; public function __construct() { if(!isset(Action::$view)) { Action::$view=new view(); } Action::$view->init(); } protected function display($ifCache=false,$charset='',$contentType='') { Action::$view->display($ifCache,$charset,$contentType); } protected function assign($name,$value) { Action::$view->assign($name,$value); } protected function success($msg,$url) { header('Location:./Exception_success.php?msg='.$msg.'&url='.$url); } protected function error($msg) { header('Location:./Exception_error.php?msg='.$msg.'&url='.$url); } }; class Model { protected $trueTableName=''; public function __construct($trueTableName='') { $this->_initialize(); if(!empty($trueTableName)) { $this->trueTableName=$trueTableName; }else { $this->trueTableName=$this->getModelName(); } $this->db(0); } public function db($linkNum,$config='') { static $_db=array(); if(!isset($_db[$linkNum])) { $config=$config?$config:CONF('db'); $dbType=ucfirst($config['dbtype']); $_db[$linkNum]=new $dbType($config); } $this->db=$_db[$linkNum]; return $this; } protected function getModelName() { return substr(get_class($this),0,-5); } public function _initialize(){} public function insert($data='') { if(empty($data) && !is_array($data)){return false;} $this->execute('INSERT INTO '.$this->trueTableName.$this->_parseData($data)); return $this->getLastInsId(); } public function getLastInsId() { return $this->db->lastInsID; } public function getFields() { return $this->db->getFields($this->trueTableName); } public function execute($sql) { return $this->db->execute($sql); } public function getNumRows() { return $this->db->numRows; } protected function _parseOptions($options='') { $options=trim($options); if(empty($options)){return '';} return ' WHERE '.$options; } protected function parseValue($value) { return '\''.$this->escapeString($value).'\''; } protected function _parseData($data=array()) { $field=array_map(array($this,'parseKey'),array_keys($data)); $value=array_map(array($this,'parseDataByType'),$data); return '('.implode(',',$field).') VALUES('.implode(',',$value).')'; } protected function parseKey($key) { $key = trim($key); if(!preg_match('/[,\'\"\*\(\)`.\s]/',$key)) { $key = '`'.$key.'`'; } return $key; } protected function escapeString($str) { return addslashes($str); } public function update($data=array(),$options='') { return $this->execute('UPDATE '.$this->trueTableName.$this->_before_update($data).$this->_parseOptions($options)); } protected function _before_update($data=array()) { $rs=array(); foreach($data as $k=>$v) { $rs[]=$this->parseKey($k).'='.$this->parseDataByType($v); } return ' SET '.implode(',',$rs); } private function parseDataByType($data) { if(is_array($data) && isset($data[1])) { switch($data[1]) { case 'int':return (int)$data[0]; case 'float':return (float)$data[0]; case 'double':return (double)$data[0]; case 'ignore':return $data[0]; case 'string':; default:return $this->parseValue($data[0]); } } else { return $this->parseValue($data); } } public function delete($options='') { return $this->db->execute('delete from '.$this->trueTableName.$this->_parseOptions($options)); } public function select($field='*',$options='',$limit='') { if(empty($field)){$field='*';} $rlimit=$limit?' limit '.$limit:''; $rs=$this->db->query('select '.$field.' from '.$this->trueTableName.$this->_parseOptions($options).$rlimit); if($limit!=1) { return $rs; } return $rs?$rs[0]:''; } public function query($sql) { return $this->db->query($sql); } public function get($k) { return $this->db->$k; } }  ?>