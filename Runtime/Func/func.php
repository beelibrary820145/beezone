<?php  function codecheck() { D('Codecheck.Codecheck'); } function halt($NO,$msg,$t=5) { if(is_numeric($NO)) { error::set($NO,$msg,$t); } } function app() { date_default_timezone_set(CONF('timezone')); $o=Rewrite::normal(); $m=MODULE; $a=ACTION; isAjax()?ajaxModule():normalModule(); } function ajaxModule() { $m=MODULE.'Ajax'; $a=ACTION; $fpath=AJAX_PATH.$m.'.class.php'; if(file_exists($fpath) && require($fpath)) { $o=new $m(); $o->$a(); } else { halt(PAGE_NOTFOUND,$m.'页面不存在',5); } } function normalModule() { $m=MODULE.'Action'; $a=ACTION; $fpath=ACTION_PATH.$m.'.class.php'; if(file_exists($fpath) && require($fpath)) { $o=new $m(); $o->$a(); } else { halt(PAGE_NOTFOUND,'页面不存在',5); } } function require_cache($fname) { static $_importFiles=array(); if(isset($_importFiles[$fname])) { return true; } if(is_file($fname) && require($fname)) { return $_importFiles[$fname]=true; } return false; } function load_ext_file() { if(CONF('load_ext_file')) { $files=explode(',',CONF('load_ext_file')); foreach($files as $v) { $file=COMMON_PATH.$v.'.php'; if(is_file($file)) require_cache($file); } } } function import($className,$baseUrl='',$ext='.class.php') { static $_file=array(); if(isset($_file[$className])) return true; $type=strpos($className,'Action')!==false?1:(strpos($className,'Model')!==false?2:-1); $className.=$ext; if($type==1) { $flag=importAction($className); }else if($type==2) { $flag=importModel($className); }else { $flag=require_cache($baseUrl.$className); } $_file[$className]=true; if(!$flag) { halt(FILE_NOTFOUND,$className.'未找到'); } } function importModel($modelName) { $fpathArr=array( MODULE_PATH.$modelName, THINK_PATH.'Common/Class/'.$modelName ); foreach($fpathArr as $v) { if(require_cache($v)) { return true; } } return false; } function importAction($actionName) { return require_cache(ACTION_PATH.$actionName); } function D($name='') { static $_model=array(); if(isset($_model[$name])){ return $_model[$name]; } $mName=strtr($name,'.#','/.').'Model'; import($mName); $class=basename($mName); if(class_exists($class,false)) { return $_model[$name]=new $class(); } halt(CLASS_NOTFOUND,$mName.'未找到'); } function M($name) { static $_model=array(); if(isset($_model[$name])) { return $_model[$name]; } if(empty($name)) { return new Model(''); } return $_model[$name]=new Model($name); } function A($name) { static $_action=array(); if(isset($_action[$name])){ return $_action[$name]; } $mName=strtr($name,'.#','/.').'Action'; import($mName); $class=basename($mName); if(class_exists($class,false)) { return $_action[$name]=new $class(); } halt(CLASS_NOTFOUND,$mName.'未找到'); } function isAjax() { if(isset($_SERVER['HTTP_X_REQUEST_WITH'])) { if('xmlhttprequest'==strtolower($_SERVER['HTTP_X_REQUEST_WITH'])) header('Expires: Fri, 25 Dec 1980 00:00:00 GMT'); header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . 'GMT'); header('Cache-Control: no-cache, must-revalidate'); header('Pragma: no-cache'); return true; } return false; } function checkCache($tmpFile) { if(!CONF('tpl_cache_on') || APP_DEBUG) return false; if(!is_file($tmpFile)) { return false; }elseif(filectime($tmpFile)>filemtime($tmpFile)) { return false; }elseif(time()>filemtime($tmpFile)+CONF('tpl_cache_time')) { return false; } return true; } function getInt($name,$def=false) { return isset($_GET[$name])?(int)$_GET[$name]:$def; } function mybase_url(&$arr) { foreach ( ( array ) $arr as $k => $v ) { if($v === '::'){ $arr[$k]=null; }else if (! is_array ( $v )) { $arr[$k]=urlencode($v); }else{ $arr [$k] = mybase_url ( str_replace(array('\"','[',']','{','}'),'',$v) ); } } return $arr; } function toJson($data) { mybase_url($data); return urldecode(json_encode($data)); } function think_encrypt($data, $key = '', $expire = 0) { $key = md5(empty($key) ? CONF('data_auth_key') : $key); $data = base64_encode($data); $x = 0; $len = strlen($data); $l = strlen($key); $char = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) $x = 0; $char .= substr($key, $x, 1); $x++; } $str = sprintf('%010d', $expire ? $expire + time():0); for ($i = 0; $i < $len; $i++) { $str .= chr(ord(substr($data, $i, 1)) + (ord(substr($char, $i, 1)))%256); } return str_replace(array('+','/','='),array('-','_',''),base64_encode($str)); } function think_decrypt($data, $key = ''){ $key = md5(empty($key) ? CONF('data_auth_key') : $key); $data = str_replace(array('-','_'),array('+','/'),$data); $mod4 = strlen($data) % 4; if ($mod4) { $data .= substr('====', $mod4); } $data = base64_decode($data); $expire = substr($data,0,10); $data = substr($data,10); if($expire > 0 && $expire < time()) { return ''; } $x = 0; $len = strlen($data); $l = strlen($key); $char = $str = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) $x = 0; $char .= substr($key, $x, 1); $x++; } for ($i = 0; $i < $len; $i++) { if (ord(substr($data, $i, 1))<ord(substr($char, $i, 1))) { $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1))); }else{ $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1))); } } return base64_decode($str); } function data_auth_sign($data) { if(!is_array($data)){ $data = (array)$data; } ksort($data); $code = http_build_query($data); $sign = sha1($code); return $sign; } function formate_bytes($size,$delimiter='') { $units=array('B','KB','MB','GB','TB','PB'); $i=0; while($size>=1024 && $i++<5) { $size/=1024; } return round($size,2).$delimiter.$units[$i]; } function returnJson($code,$data,$ext=null) { $rs=array(); if($code==SUCCESS) { if(is_array($ext)) { ($err_msg=array_shift($ext))||($err_msg=''); $rs=array( 'status'=>array( 'msg'=>$err_msg, 'code'=>SUCCESS ) ); $rs=array_merge($rs,$data); } else { $rs=array( 'status'=>array( 'msg'=>$ext, 'code'=>SUCCESS, ), 'data'=>$data ); } }else { if(is_array($ext)) { $rs=array( 'code'=>$code, 'msg'=>$data ); $rs=array_merge($rs,$ext); $rs=array('status'=>$rs); } else { $rs=array( 'status'=>array( 'code'=>$code, 'msg'=>$data, 'request'=>$ext ) ); } } mybase_url($rs); exit(urldecode(json_encode($rs))); } function dataFilter(&$data,$ReqType) { if($ReqType=='get') { $data=D('Basefilter')->getFilter($data); } else if($ReqType=='post') { $data=D('Basefilter')->postFilter($data); } if(!$data) { returnJson(FAIL,'unlawful request'); } } function getPage() { return isset($_POST['page'])&&(int)$_POST['page']>0?(int)$_POST['page']:1; }  ?>